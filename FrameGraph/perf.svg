<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="726.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="709" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="709" > </text>
<g id="frames">
<g >
<title>tcp_v4_rcv (1 samples, 0.02%)</title><rect x="931.8" y="261" width="0.2" height="15.0" fill="rgb(233,40,2)" rx="2" ry="2" />
<text  x="934.80" y="271.5" ></text>
</g>
<g >
<title>ip_rcv_finish (1 samples, 0.02%)</title><rect x="931.8" y="309" width="0.2" height="15.0" fill="rgb(213,96,43)" rx="2" ry="2" />
<text  x="934.80" y="319.5" ></text>
</g>
<g >
<title>ip_output (1 samples, 0.02%)</title><rect x="931.8" y="165" width="0.2" height="15.0" fill="rgb(243,148,43)" rx="2" ry="2" />
<text  x="934.80" y="175.5" ></text>
</g>
<g >
<title>ip_rcv_finish (1 samples, 0.02%)</title><rect x="277.6" y="325" width="0.2" height="15.0" fill="rgb(220,141,27)" rx="2" ry="2" />
<text  x="280.62" y="335.5" ></text>
</g>
<g >
<title>c (4,404 samples, 78.15%)</title><rect x="10.0" y="581" width="922.2" height="15.0" fill="rgb(207,163,24)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >c</text>
</g>
<g >
<title>tcp_send_ack (1 samples, 0.02%)</title><rect x="277.6" y="213" width="0.2" height="15.0" fill="rgb(206,189,49)" rx="2" ry="2" />
<text  x="280.62" y="223.5" ></text>
</g>
<g >
<title>__do_softirq (4 samples, 0.07%)</title><rect x="931.4" y="437" width="0.8" height="15.0" fill="rgb(205,170,19)" rx="2" ry="2" />
<text  x="934.38" y="447.5" ></text>
</g>
<g >
<title>blk_done_softirq (1 samples, 0.02%)</title><rect x="931.6" y="421" width="0.2" height="15.0" fill="rgb(222,146,31)" rx="2" ry="2" />
<text  x="934.59" y="431.5" ></text>
</g>
<g >
<title>dev_queue_xmit (1 samples, 0.02%)</title><rect x="931.8" y="133" width="0.2" height="15.0" fill="rgb(227,176,6)" rx="2" ry="2" />
<text  x="934.80" y="143.5" ></text>
</g>
<g >
<title>do_softirq (1 samples, 0.02%)</title><rect x="1189.8" y="517" width="0.2" height="15.0" fill="rgb(243,33,9)" rx="2" ry="2" />
<text  x="1192.79" y="527.5" ></text>
</g>
<g >
<title>do_IRQ (4 samples, 0.07%)</title><rect x="931.4" y="501" width="0.8" height="15.0" fill="rgb(207,136,5)" rx="2" ry="2" />
<text  x="934.38" y="511.5" ></text>
</g>
<g >
<title>a (5,635 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(242,124,25)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >a</text>
</g>
<g >
<title>blk_mq_in_flight (1 samples, 0.02%)</title><rect x="931.6" y="325" width="0.2" height="15.0" fill="rgb(210,43,31)" rx="2" ry="2" />
<text  x="934.59" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.04%)</title><rect x="931.0" y="405" width="0.4" height="15.0" fill="rgb(250,126,1)" rx="2" ry="2" />
<text  x="933.97" y="415.5" ></text>
</g>
<g >
<title>superios (1 samples, 0.02%)</title><rect x="932.0" y="325" width="0.2" height="15.0" fill="rgb(235,108,12)" rx="2" ry="2" />
<text  x="935.01" y="335.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1189.8" y="549" width="0.2" height="15.0" fill="rgb(241,17,52)" rx="2" ry="2" />
<text  x="1192.79" y="559.5" ></text>
</g>
<g >
<title>tcp_v4_send_reset (1 samples, 0.02%)</title><rect x="931.8" y="245" width="0.2" height="15.0" fill="rgb(218,90,21)" rx="2" ry="2" />
<text  x="934.80" y="255.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.02%)</title><rect x="1189.8" y="533" width="0.2" height="15.0" fill="rgb(225,207,19)" rx="2" ry="2" />
<text  x="1192.79" y="543.5" ></text>
</g>
<g >
<title>iowrite16 (1 samples, 0.02%)</title><rect x="931.8" y="37" width="0.2" height="15.0" fill="rgb(241,141,7)" rx="2" ry="2" />
<text  x="934.80" y="47.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (1 samples, 0.02%)</title><rect x="931.8" y="117" width="0.2" height="15.0" fill="rgb(211,4,3)" rx="2" ry="2" />
<text  x="934.80" y="127.5" ></text>
</g>
<g >
<title>__do_softirq (1 samples, 0.02%)</title><rect x="1189.8" y="485" width="0.2" height="15.0" fill="rgb(208,85,38)" rx="2" ry="2" />
<text  x="1192.79" y="495.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (2 samples, 0.04%)</title><rect x="931.0" y="421" width="0.4" height="15.0" fill="rgb(217,4,40)" rx="2" ry="2" />
<text  x="933.97" y="431.5" ></text>
</g>
<g >
<title>g (3,124 samples, 55.44%)</title><rect x="278.0" y="533" width="654.2" height="15.0" fill="rgb(234,22,23)" rx="2" ry="2" />
<text  x="281.04" y="543.5" >g</text>
</g>
<g >
<title>do_softirq (4 samples, 0.07%)</title><rect x="931.4" y="469" width="0.8" height="15.0" fill="rgb(245,208,0)" rx="2" ry="2" />
<text  x="934.38" y="479.5" ></text>
</g>
<g >
<title>i (1,231 samples, 21.85%)</title><rect x="932.2" y="581" width="257.8" height="15.0" fill="rgb(236,192,23)" rx="2" ry="2" />
<text  x="935.22" y="591.5" >i</text>
</g>
<g >
<title>ip_queue_xmit (1 samples, 0.02%)</title><rect x="277.6" y="181" width="0.2" height="15.0" fill="rgb(244,154,18)" rx="2" ry="2" />
<text  x="280.62" y="191.5" ></text>
</g>
<g >
<title>__netif_receive_skb (1 samples, 0.02%)</title><rect x="277.6" y="373" width="0.2" height="15.0" fill="rgb(225,196,28)" rx="2" ry="2" />
<text  x="280.62" y="383.5" ></text>
</g>
<g >
<title>call_softirq (1 samples, 0.02%)</title><rect x="277.6" y="469" width="0.2" height="15.0" fill="rgb(216,86,33)" rx="2" ry="2" />
<text  x="280.62" y="479.5" ></text>
</g>
<g >
<title>do_softirq (1 samples, 0.02%)</title><rect x="277.6" y="485" width="0.2" height="15.0" fill="rgb(252,140,35)" rx="2" ry="2" />
<text  x="280.62" y="495.5" ></text>
</g>
<g >
<title>d (4,404 samples, 78.15%)</title><rect x="10.0" y="565" width="922.2" height="15.0" fill="rgb(229,184,25)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >d</text>
</g>
<g >
<title>ip_finish_output (1 samples, 0.02%)</title><rect x="931.8" y="149" width="0.2" height="15.0" fill="rgb(216,139,51)" rx="2" ry="2" />
<text  x="934.80" y="159.5" ></text>
</g>
<g >
<title>net_rx_action (1 samples, 0.02%)</title><rect x="277.6" y="437" width="0.2" height="15.0" fill="rgb(218,91,42)" rx="2" ry="2" />
<text  x="280.62" y="447.5" ></text>
</g>
<g >
<title>virtnet_poll (2 samples, 0.04%)</title><rect x="931.8" y="405" width="0.4" height="15.0" fill="rgb(236,151,53)" rx="2" ry="2" />
<text  x="934.80" y="415.5" ></text>
</g>
<g >
<title>h (1,231 samples, 21.85%)</title><rect x="932.2" y="597" width="257.8" height="15.0" fill="rgb(241,115,36)" rx="2" ry="2" />
<text  x="935.22" y="607.5" >h</text>
</g>
<g >
<title>virtblk_request_done (1 samples, 0.02%)</title><rect x="931.6" y="405" width="0.2" height="15.0" fill="rgb(222,145,44)" rx="2" ry="2" />
<text  x="934.59" y="415.5" ></text>
</g>
<g >
<title>__tcp_ack_snd_check (1 samples, 0.02%)</title><rect x="277.6" y="229" width="0.2" height="15.0" fill="rgb(207,167,9)" rx="2" ry="2" />
<text  x="280.62" y="239.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.02%)</title><rect x="1189.8" y="469" width="0.2" height="15.0" fill="rgb(227,206,20)" rx="2" ry="2" />
<text  x="1192.79" y="479.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1 samples, 0.02%)</title><rect x="1189.8" y="453" width="0.2" height="15.0" fill="rgb(246,96,9)" rx="2" ry="2" />
<text  x="1192.79" y="463.5" ></text>
</g>
<g >
<title>call_softirq (4 samples, 0.07%)</title><rect x="931.4" y="453" width="0.8" height="15.0" fill="rgb(221,193,16)" rx="2" ry="2" />
<text  x="934.38" y="463.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.02%)</title><rect x="277.6" y="517" width="0.2" height="15.0" fill="rgb(216,56,44)" rx="2" ry="2" />
<text  x="280.62" y="527.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (1 samples, 0.02%)</title><rect x="277.6" y="277" width="0.2" height="15.0" fill="rgb(246,193,27)" rx="2" ry="2" />
<text  x="280.62" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="1189.8" y="405" width="0.2" height="15.0" fill="rgb(217,68,9)" rx="2" ry="2" />
<text  x="1192.79" y="415.5" ></text>
</g>
<g >
<title>ret_from_intr (4 samples, 0.07%)</title><rect x="931.4" y="517" width="0.8" height="15.0" fill="rgb(214,122,30)" rx="2" ry="2" />
<text  x="934.38" y="527.5" ></text>
</g>
<g >
<title>tcp_rcv_established (1 samples, 0.02%)</title><rect x="277.6" y="245" width="0.2" height="15.0" fill="rgb(206,47,28)" rx="2" ry="2" />
<text  x="280.62" y="255.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.02%)</title><rect x="277.6" y="533" width="0.2" height="15.0" fill="rgb(252,222,38)" rx="2" ry="2" />
<text  x="280.62" y="543.5" ></text>
</g>
<g >
<title>call_softirq (1 samples, 0.02%)</title><rect x="1189.8" y="501" width="0.2" height="15.0" fill="rgb(242,164,41)" rx="2" ry="2" />
<text  x="1192.79" y="511.5" ></text>
</g>
<g >
<title>irq_exit (4 samples, 0.07%)</title><rect x="931.4" y="485" width="0.8" height="15.0" fill="rgb(217,21,48)" rx="2" ry="2" />
<text  x="934.38" y="495.5" ></text>
</g>
<g >
<title>ip_local_out_sk (1 samples, 0.02%)</title><rect x="931.8" y="181" width="0.2" height="15.0" fill="rgb(238,220,31)" rx="2" ry="2" />
<text  x="934.80" y="191.5" ></text>
</g>
<g >
<title>all (5,635 samples, 100%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(218,197,4)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.05%)</title><rect x="930.8" y="517" width="0.6" height="15.0" fill="rgb(229,216,34)" rx="2" ry="2" />
<text  x="933.76" y="527.5" ></text>
</g>
<g >
<title>ip_local_deliver (1 samples, 0.02%)</title><rect x="277.6" y="309" width="0.2" height="15.0" fill="rgb(212,0,31)" rx="2" ry="2" />
<text  x="280.62" y="319.5" ></text>
</g>
<g >
<title>ip_local_deliver (1 samples, 0.02%)</title><rect x="931.8" y="293" width="0.2" height="15.0" fill="rgb(244,226,49)" rx="2" ry="2" />
<text  x="934.80" y="303.5" ></text>
</g>
<g >
<title>virtnet_poll (1 samples, 0.02%)</title><rect x="277.6" y="421" width="0.2" height="15.0" fill="rgb(243,102,50)" rx="2" ry="2" />
<text  x="280.62" y="431.5" ></text>
</g>
<g >
<title>bt_iter (1 samples, 0.02%)</title><rect x="931.6" y="309" width="0.2" height="15.0" fill="rgb(217,124,36)" rx="2" ry="2" />
<text  x="934.59" y="319.5" ></text>
</g>
<g >
<title>ip_push_pending_frames (1 samples, 0.02%)</title><rect x="931.8" y="213" width="0.2" height="15.0" fill="rgb(207,26,11)" rx="2" ry="2" />
<text  x="934.80" y="223.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1 samples, 0.02%)</title><rect x="277.6" y="293" width="0.2" height="15.0" fill="rgb(226,197,9)" rx="2" ry="2" />
<text  x="280.62" y="303.5" ></text>
</g>
<g >
<title>napi_gro_receive (2 samples, 0.04%)</title><rect x="931.8" y="389" width="0.4" height="15.0" fill="rgb(231,184,7)" rx="2" ry="2" />
<text  x="934.80" y="399.5" ></text>
</g>
<g >
<title>main (5,635 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(250,89,6)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >main</text>
</g>
<g >
<title>net_rx_action (2 samples, 0.04%)</title><rect x="931.8" y="421" width="0.4" height="15.0" fill="rgb(217,153,2)" rx="2" ry="2" />
<text  x="934.80" y="431.5" ></text>
</g>
<g >
<title>napi_gro_receive (1 samples, 0.02%)</title><rect x="277.6" y="405" width="0.2" height="15.0" fill="rgb(235,143,1)" rx="2" ry="2" />
<text  x="280.62" y="415.5" ></text>
</g>
<g >
<title>ip_rcv (1 samples, 0.02%)</title><rect x="277.6" y="341" width="0.2" height="15.0" fill="rgb(227,133,15)" rx="2" ry="2" />
<text  x="280.62" y="351.5" ></text>
</g>
<g >
<title>sch_direct_xmit (1 samples, 0.02%)</title><rect x="931.8" y="101" width="0.2" height="15.0" fill="rgb(253,79,54)" rx="2" ry="2" />
<text  x="934.80" y="111.5" ></text>
</g>
<g >
<title>ip_rcv (1 samples, 0.02%)</title><rect x="931.8" y="325" width="0.2" height="15.0" fill="rgb(249,36,48)" rx="2" ry="2" />
<text  x="934.80" y="335.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.02%)</title><rect x="277.6" y="501" width="0.2" height="15.0" fill="rgb(238,169,17)" rx="2" ry="2" />
<text  x="280.62" y="511.5" ></text>
</g>
<g >
<title>start_xmit (1 samples, 0.02%)</title><rect x="931.8" y="69" width="0.2" height="15.0" fill="rgb(209,8,15)" rx="2" ry="2" />
<text  x="934.80" y="79.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (1 samples, 0.02%)</title><rect x="931.8" y="85" width="0.2" height="15.0" fill="rgb(249,139,35)" rx="2" ry="2" />
<text  x="934.80" y="95.5" ></text>
</g>
<g >
<title>netif_receive_skb_internal (2 samples, 0.04%)</title><rect x="931.8" y="373" width="0.4" height="15.0" fill="rgb(241,225,9)" rx="2" ry="2" />
<text  x="934.80" y="383.5" ></text>
</g>
<g >
<title>blk_mq_end_request (1 samples, 0.02%)</title><rect x="931.6" y="389" width="0.2" height="15.0" fill="rgb(226,70,22)" rx="2" ry="2" />
<text  x="934.59" y="399.5" ></text>
</g>
<g >
<title>e (1,279 samples, 22.70%)</title><rect x="10.0" y="549" width="267.8" height="15.0" fill="rgb(229,103,41)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >e</text>
</g>
<g >
<title>netif_receive_skb_internal (1 samples, 0.02%)</title><rect x="277.6" y="389" width="0.2" height="15.0" fill="rgb(235,48,8)" rx="2" ry="2" />
<text  x="280.62" y="399.5" ></text>
</g>
<g >
<title>part_in_flight (1 samples, 0.02%)</title><rect x="931.6" y="341" width="0.2" height="15.0" fill="rgb(245,186,21)" rx="2" ry="2" />
<text  x="934.59" y="351.5" ></text>
</g>
<g >
<title>f (3,125 samples, 55.46%)</title><rect x="277.8" y="549" width="654.4" height="15.0" fill="rgb(241,135,30)" rx="2" ry="2" />
<text  x="280.83" y="559.5" >f</text>
</g>
<g >
<title>ip_send_unicast_reply (1 samples, 0.02%)</title><rect x="931.8" y="229" width="0.2" height="15.0" fill="rgb(225,183,51)" rx="2" ry="2" />
<text  x="934.80" y="239.5" ></text>
</g>
<g >
<title>main1 (5,635 samples, 100.00%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(225,198,41)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >main1</text>
</g>
<g >
<title>tcp_v4_do_rcv (1 samples, 0.02%)</title><rect x="277.6" y="261" width="0.2" height="15.0" fill="rgb(248,161,17)" rx="2" ry="2" />
<text  x="280.62" y="271.5" ></text>
</g>
<g >
<title>part_round_stats (1 samples, 0.02%)</title><rect x="931.6" y="357" width="0.2" height="15.0" fill="rgb(218,166,4)" rx="2" ry="2" />
<text  x="934.59" y="367.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.05%)</title><rect x="930.8" y="501" width="0.6" height="15.0" fill="rgb(238,112,48)" rx="2" ry="2" />
<text  x="933.76" y="511.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.05%)</title><rect x="930.8" y="485" width="0.6" height="15.0" fill="rgb(219,113,0)" rx="2" ry="2" />
<text  x="933.76" y="495.5" ></text>
</g>
<g >
<title>__do_softirq (3 samples, 0.05%)</title><rect x="930.8" y="437" width="0.6" height="15.0" fill="rgb(211,44,17)" rx="2" ry="2" />
<text  x="933.76" y="447.5" ></text>
</g>
<g >
<title>__netif_receive_skb (2 samples, 0.04%)</title><rect x="931.8" y="357" width="0.4" height="15.0" fill="rgb(235,171,29)" rx="2" ry="2" />
<text  x="934.80" y="367.5" ></text>
</g>
<g >
<title>b (4,404 samples, 78.15%)</title><rect x="10.0" y="597" width="922.2" height="15.0" fill="rgb(210,108,12)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >b</text>
</g>
<g >
<title>blk_account_io_done (1 samples, 0.02%)</title><rect x="931.6" y="373" width="0.2" height="15.0" fill="rgb(232,61,5)" rx="2" ry="2" />
<text  x="934.59" y="383.5" ></text>
</g>
<g >
<title>virtqueue_kick (1 samples, 0.02%)</title><rect x="931.8" y="53" width="0.2" height="15.0" fill="rgb(234,229,20)" rx="2" ry="2" />
<text  x="934.80" y="63.5" ></text>
</g>
<g >
<title>ip_send_skb (1 samples, 0.02%)</title><rect x="931.8" y="197" width="0.2" height="15.0" fill="rgb(247,3,31)" rx="2" ry="2" />
<text  x="934.80" y="207.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (1 samples, 0.02%)</title><rect x="931.8" y="277" width="0.2" height="15.0" fill="rgb(219,210,23)" rx="2" ry="2" />
<text  x="934.80" y="287.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1189.8" y="565" width="0.2" height="15.0" fill="rgb(234,107,4)" rx="2" ry="2" />
<text  x="1192.79" y="575.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (1 samples, 0.02%)</title><rect x="277.6" y="357" width="0.2" height="15.0" fill="rgb(209,30,5)" rx="2" ry="2" />
<text  x="280.62" y="367.5" ></text>
</g>
<g >
<title>call_softirq (3 samples, 0.05%)</title><rect x="930.8" y="453" width="0.6" height="15.0" fill="rgb(209,208,8)" rx="2" ry="2" />
<text  x="933.76" y="463.5" ></text>
</g>
<g >
<title>tcp_transmit_skb (1 samples, 0.02%)</title><rect x="277.6" y="197" width="0.2" height="15.0" fill="rgb(246,150,16)" rx="2" ry="2" />
<text  x="280.62" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (5,635 samples, 100.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(226,47,18)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >__libc_start_main</text>
</g>
<g >
<title>do_softirq (3 samples, 0.05%)</title><rect x="930.8" y="469" width="0.6" height="15.0" fill="rgb(217,169,20)" rx="2" ry="2" />
<text  x="933.76" y="479.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1 samples, 0.02%)</title><rect x="1189.8" y="421" width="0.2" height="15.0" fill="rgb(241,22,34)" rx="2" ry="2" />
<text  x="1192.79" y="431.5" ></text>
</g>
<g >
<title>__wake_up (1 samples, 0.02%)</title><rect x="1189.8" y="437" width="0.2" height="15.0" fill="rgb(221,26,44)" rx="2" ry="2" />
<text  x="1192.79" y="447.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (2 samples, 0.04%)</title><rect x="931.8" y="341" width="0.4" height="15.0" fill="rgb(220,56,12)" rx="2" ry="2" />
<text  x="934.80" y="351.5" ></text>
</g>
<g >
<title>__do_softirq (1 samples, 0.02%)</title><rect x="277.6" y="453" width="0.2" height="15.0" fill="rgb(206,177,19)" rx="2" ry="2" />
<text  x="280.62" y="463.5" ></text>
</g>
</g>
</svg>
